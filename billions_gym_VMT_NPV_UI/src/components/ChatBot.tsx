import React, { useState, useRef, useEffect } from 'react';
import './ChatBot.css';

interface Message {
    id: string;
    text: string;
    isBot: boolean;
    timestamp: Date;
}

interface ChatBotProps {
    isOpen: boolean;
    onClose: () => void;
}

const ChatBot: React.FC<ChatBotProps> = ({ isOpen, onClose }) => {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: '1',
            text: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa Billions Fitness & Yoga. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c d·ªãch v·ª• v√† g√≥i t·∫≠p c·ªßa ch√∫ng t√¥i. B·∫°n mu·ªën bi·∫øt g√¨?',
            isBot: true,
            timestamp: new Date()
        }
    ]);
    const [inputText, setInputText] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const predefinedResponses: { [key: string]: string } = {
        'g√≥i t·∫≠p': 'Billions c√≥ nhi·ªÅu g√≥i t·∫≠p ph√π h·ª£p:\n\nüèãÔ∏è **G√≥i Basic**: T·∫≠p gym c∆° b·∫£n, s·ª≠ d·ª•ng thi·∫øt b·ªã\nüí™ **G√≥i Premium**: Gym + Group X + Yoga + B·ªÉ b∆°i\n‚≠ê **G√≥i VIP**: T·∫•t c·∫£ d·ªãch v·ª• + PT c√° nh√¢n + Spa\nüéØ **G√≥i Student**: ∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho sinh vi√™n\n\nB·∫°n mu·ªën t√¨m hi·ªÉu g√≥i n√†o c·ª• th·ªÉ?',
        
        'gi√° c·∫£': 'B·∫£ng gi√° g√≥i t·∫≠p t·∫°i Billions:\n\nüí∞ **G√≥i Basic**: 899.000ƒë/th√°ng\nüíé **G√≥i Premium**: 1.299.000ƒë/th√°ng\nüëë **G√≥i VIP**: 1.899.000ƒë/th√°ng\nüéì **G√≥i Student**: 699.000ƒë/th√°ng\n\n‚ú® ƒêƒÉng k√Ω 6 th√°ng gi·∫£m 15%\nüéâ ƒêƒÉng k√Ω 12 th√°ng gi·∫£m 25%\n\nLi√™n h·ªá 1800 6995 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt!',
        
        'd·ªãch v·ª•': 'Billions cung c·∫•p ƒëa d·∫°ng d·ªãch v·ª•:\n\nüèãÔ∏è **Gym & Fitness**: Thi·∫øt b·ªã hi·ªán ƒë·∫°i, khu v·ª±c ri√™ng bi·ªát\nüßò **Yoga**: ƒêa d·∫°ng l·ªõp t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao\nüíÉ **Group X**: 50+ l·ªõp t·∫≠p nh√≥m (Zumba, Aerobic, Dance)\nü•ä **Kickfit & MMA**: L·ªõp v√µ thu·∫≠t chuy√™n nghi·ªáp\nüèä **B·ªÉ b∆°i**: B·ªÉ b∆°i trong nh√†, Jacuzzi\nüë®‚Äç‚öïÔ∏è **Personal Training**: Hu·∫•n luy·ªán vi√™n c√° nh√¢n\nüßñ‚Äç‚ôÄÔ∏è **Spa & Massage**: Th∆∞ gi√£n sau t·∫≠p luy·ªán',
        
        'ƒë·ªãa ch·ªâ': 'Billions c√≥ 37+ c√¢u l·∫°c b·ªô tr√™n to√†n qu·ªëc:\n\nüè¢ **Tr·ª• s·ªü ch√≠nh**: 126 H√πng V∆∞∆°ng, P.12, Q.5, TP.HCM\nüìç **TP.HCM**: 15 chi nh√°nh\nüìç **H√† N·ªôi**: 8 chi nh√°nh\nüìç **ƒê√† N·∫µng**: 4 chi nh√°nh\nüìç **C√°c t·ªânh kh√°c**: 10+ chi nh√°nh\n\nG·ªçi 1800 6995 ƒë·ªÉ t√¨m c√¢u l·∫°c b·ªô g·∫ßn b·∫°n nh·∫•t!',
        
        'gi·ªù m·ªü c·ª≠a': 'Gi·ªù ho·∫°t ƒë·ªông c·ªßa Billions:\n\n‚è∞ **Th·ª© 2 - Th·ª© 6**: 5:30 - 22:30\n‚è∞ **Th·ª© 7 - Ch·ªß nh·∫≠t**: 6:00 - 22:00\n‚è∞ **L·ªÖ T·∫øt**: 7:00 - 20:00\n\nüéØ L·ªõp Group X: 6:00 - 21:00\nüßò L·ªõp Yoga: 6:30 - 21:30\nüèä B·ªÉ b∆°i: 6:00 - 22:00',
        
        'ƒëƒÉng k√Ω': 'C√°ch ƒëƒÉng k√Ω th√†nh vi√™n Billions:\n\nüìù **B∆∞·ªõc 1**: ƒê·∫øn tr·ª±c ti·∫øp c√¢u l·∫°c b·ªô g·∫ßn nh·∫•t\nüìã **B∆∞·ªõc 2**: T∆∞ v·∫•n v√† ch·ªçn g√≥i ph√π h·ª£p\nüí≥ **B∆∞·ªõc 3**: Thanh to√°n v√† l√†m th·∫ª th√†nh vi√™n\nüéÅ **B∆∞·ªõc 4**: Nh·∫≠n qu√† t·∫∑ng ch√†o m·ª´ng\n\nüÜì **∆Øu ƒë√£i hi·ªán t·∫°i**: T·∫∑ng 7 ng√†y tr·∫£i nghi·ªám mi·ªÖn ph√≠!\n\nLi√™n h·ªá ngay: 1800 6995',
        
        'personal trainer': 'D·ªãch v·ª• Personal Trainer t·∫°i Billions:\n\nüë®‚Äçüè´ **Hu·∫•n luy·ªán vi√™n ch·ª©ng nh·∫≠n NASM qu·ªëc t·∫ø**\nüìä **ƒê√°nh gi√° th·ªÉ tr·∫°ng v√† l·∫≠p k·∫ø ho·∫°ch c√° nh√¢n**\nüéØ **H∆∞·ªõng d·∫´n 1-1 chuy√™n s√¢u**\nüìà **Theo d√µi ti·∫øn ƒë·ªô v√† ƒëi·ªÅu ch·ªânh**\nüçé **T∆∞ v·∫•n dinh d∆∞·ª°ng**\n\nüí∞ **Gi√°**: 500.000ƒë - 800.000ƒë/bu·ªïi\n‚è±Ô∏è **Th·ªùi gian**: 60-90 ph√∫t/bu·ªïi',
        
        'yoga': 'Ch∆∞∆°ng tr√¨nh Yoga t·∫°i Billions:\n\nüßò‚Äç‚ôÄÔ∏è **Hatha Yoga**: C∆° b·∫£n, ph√π h·ª£p ng∆∞·ªùi m·ªõi\nüî• **Hot Yoga**: T·∫≠p trong ph√≤ng n√≥ng 38-40¬∞C\n‚ö° **Vinyasa Flow**: ƒê·ªông t√°c li√™n t·ª•c, nƒÉng ƒë·ªông\nüåÖ **Yin Yoga**: Th∆∞ gi√£n, gi√£n c∆° s√¢u\nüë∂ **Prenatal Yoga**: D√†nh cho m·∫π b·∫ßu\n\nüë®‚Äçüè´ **Gi·∫£ng vi√™n t·ª´ ·∫§n ƒê·ªô v√† ƒë∆∞·ª£c ch·ª©ng nh·∫≠n qu·ªëc t·∫ø**',
        
        'group x': 'L·ªõp Group X ƒëa d·∫°ng t·∫°i Billions:\n\nüíÉ **Dance**: Zumba, K-Pop Dance, Sexy Dance\nü•ä **Combat**: Body Combat, Kickboxing\nüö¥ **Cardio**: Spinning, RPM, Step Aerobic\nüí™ **Strength**: Body Pump, Functional Training\nüéµ **ƒê·ªôc quy·ªÅn**: BillionsDrumfit, BillionsStep\n\nüìÖ **50+ l·ªõp/tu·∫ßn**, c·∫≠p nh·∫≠t h√†ng th√°ng\n‚è∞ **ƒêa d·∫°ng khung gi·ªù** ph√π h·ª£p m·ªçi l·ªãch tr√¨nh'
    };

    const getResponse = (userMessage: string): string => {
        const message = userMessage.toLowerCase();
        
        for (const [key, response] of Object.entries(predefinedResponses)) {
            if (message.includes(key)) {
                return response;
            }
        }
        
        // Default responses for common greetings
        if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
            return 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ:\n\nüèãÔ∏è C√°c g√≥i t·∫≠p v√† gi√° c·∫£\nüéØ D·ªãch v·ª• t·∫°i Billions\nüìç ƒê·ªãa ch·ªâ c√°c c√¢u l·∫°c b·ªô\n‚è∞ Gi·ªù ho·∫°t ƒë·ªông\nüìù C√°ch ƒëƒÉng k√Ω th√†nh vi√™n\n\nB·∫°n mu·ªën bi·∫øt th√¥ng tin g√¨?';
        }
        
        if (message.includes('c·∫£m ∆°n') || message.includes('thank')) {
            return 'R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! N·∫øu c√≥ th√™m c√¢u h·ªèi n√†o kh√°c v·ªÅ Billions Fitness & Yoga, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©! üòä\n\nHo·∫∑c li√™n h·ªá tr·ª±c ti·∫øp: 1800 6995';
        }
        
        // Default response
        return 'T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn th√¥ng tin n√†y. ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v√† ch√≠nh x√°c nh·∫•t, b·∫°n c√≥ th·ªÉ:\n\nüìû **G·ªçi hotline**: 1800 6995\nüè¢ **ƒê·∫øn tr·ª±c ti·∫øp**: C√¢u l·∫°c b·ªô Billions g·∫ßn nh·∫•t\nüí¨ **H·ªèi t√¥i v·ªÅ**: G√≥i t·∫≠p, d·ªãch v·ª•, gi√° c·∫£, ƒë·ªãa ch·ªâ\n\nT√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä';
    };

    const handleSendMessage = async () => {
        if (!inputText.trim()) return;

        const userMessage: Message = {
            id: Date.now().toString(),
            text: inputText,
            isBot: false,
            timestamp: new Date()
        };

        setMessages(prev => [...prev, userMessage]);
        setInputText('');
        setIsTyping(true);

        // Simulate typing delay
        setTimeout(() => {
            const botResponse: Message = {
                id: (Date.now() + 1).toString(),
                text: getResponse(inputText),
                isBot: true,
                timestamp: new Date()
            };

            setMessages(prev => [...prev, botResponse]);
            setIsTyping(false);
        }, 1000 + Math.random() * 1000);
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const quickQuestions = [
        'G√≥i t·∫≠p c√≥ g√¨?',
        'Gi√° c·∫£ nh∆∞ th·∫ø n√†o?',
        'ƒê·ªãa ch·ªâ ·ªü ƒë√¢u?',
        'Gi·ªù m·ªü c·ª≠a?'
    ];

    if (!isOpen) return null;

    return (
        <div className="chatbot-overlay">
            <div className="chatbot-container">
                <div className="chatbot-header">
                    <div className="chatbot-avatar">
                        <span>ü§ñ</span>
                    </div>
                    <div className="chatbot-info">
                        <h3>Billions AI Assistant</h3>
                        <span className="status">‚óè Online</span>
                    </div>
                    <button className="chatbot-close" onClick={onClose}>
                        ‚úï
                    </button>
                </div>

                <div className="chatbot-messages">
                    {messages.map((message) => (
                        <div
                            key={message.id}
                            className={`message ${message.isBot ? 'bot-message' : 'user-message'}`}
                        >
                            <div className="message-content">
                                {message.text.split('\n').map((line, index) => (
                                    <div key={index}>{line}</div>
                                ))}
                            </div>
                            <div className="message-time">
                                {message.timestamp.toLocaleTimeString('vi-VN', { 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                })}
                            </div>
                        </div>
                    ))}
                    
                    {isTyping && (
                        <div className="message bot-message">
                            <div className="message-content typing">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    )}
                    <div ref={messagesEndRef} />
                </div>

                {messages.length === 1 && (
                    <div className="quick-questions">
                        <p>C√¢u h·ªèi th∆∞·ªùng g·∫∑p:</p>
                        <div className="quick-buttons">
                            {quickQuestions.map((question, index) => (
                                <button
                                    key={index}
                                    className="quick-button"
                                    onClick={() => {
                                        setInputText(question);
                                        setTimeout(() => handleSendMessage(), 100);
                                    }}
                                >
                                    {question}
                                </button>
                            ))}
                        </div>
                    </div>
                )}

                <div className="chatbot-input">
                    <input
                        type="text"
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                        className="message-input"
                    />
                    <button 
                        onClick={handleSendMessage}
                        className="send-button"
                        disabled={!inputText.trim()}
                    >
                        ‚û§
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ChatBot;
