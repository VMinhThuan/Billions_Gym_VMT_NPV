import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import SimpleLayout from '../components/layout/SimpleLayout';
import Reviews from '../components/Reviews';
import RatingSummary from '../components/RatingSummary';
import CompareModal from '../components/CompareModal';
import { api } from '../services/api';
import './PackageDetail.css';

const PackageDetail = ({ onNavigateToLogin, onNavigateToRegister }) => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [packageData, setPackageData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showCompareModal, setShowCompareModal] = useState(false);
    const [isRegistering, setIsRegistering] = useState(false);
    const [allPackages, setAllPackages] = useState([]);
    const [showServices, setShowServices] = useState(false);
    const [user, setUser] = useState(null);
    const [showReviews, setShowReviews] = useState(false);
    const [selectedPackageForCompare, setSelectedPackageForCompare] = useState(null);

    useEffect(() => {
        fetchPackageDetail();
        fetchAllPackages();

        // L·∫•y th√¥ng tin user t·ª´ localStorage
        const token = localStorage.getItem('token');
        if (token) {
            const userData = localStorage.getItem('user');
            if (userData) {
                setUser(JSON.parse(userData));
            }
        }
    }, [id]);

    const handleRatingClick = () => {
        setShowReviews(true);
        // Scroll to reviews section after a short delay
        setTimeout(() => {
            const reviewsSection = document.querySelector('.reviews-section');
            if (reviewsSection) {
                reviewsSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        }, 100);
    };

    const handleCompareClick = () => {
        setSelectedPackageForCompare(packageData);
        setShowCompareModal(true);
    };

    const handleCloseCompareModal = () => {
        setShowCompareModal(false);
        setSelectedPackageForCompare(null);
    };

    const fetchPackageDetail = async () => {
        try {
            setLoading(true);
            setError(null);
            console.log('üîç Fetching package detail for ID:', id);

            const response = await api.get(`/goitap/${id}`, {}, false);
            console.log('üì¶ Package detail response:', response);

            setPackageData(response);
        } catch (error) {
            console.error('‚ùå Error fetching package detail:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin g√≥i t·∫≠p');
        } finally {
            setLoading(false);
        }
    };

    const fetchAllPackages = async () => {
        try {
            const response = await api.get('/goitap', {}, false);
            setAllPackages(Array.isArray(response) ? response.filter(pkg => pkg.kichHoat) : []);
        } catch (error) {
            console.error('‚ùå Error fetching all packages:', error);
        }
    };

    const handleRegister = () => {
        if (!packageData) return;
        navigate(`/checkout/${packageData._id}`);
    };

    const formatPrice = (price) => {
        return new Intl.NumberFormat('vi-VN').format(price);
    };

    const getPackageTypeLabel = (loaiGoiTap) => {
        const types = {
            'CaNhan': 'üí™ C√° Nh√¢n',
            'Nhom': 'üë• Nh√≥m',
            'CongTy': 'üè¢ C√¥ng Ty'
        };
        return types[loaiGoiTap] || loaiGoiTap;
    };

    const getDurationLabel = (thoiHan, donViThoiHan) => {
        if (thoiHan >= 36500) return '‚ôæÔ∏è Vƒ©nh vi·ªÖn';
        if (thoiHan >= 365) return 'üìÜ Theo nƒÉm';
        return 'üìÖ Theo th√°ng';
    };

    const getPackageFeatures = (pkg) => {
        // S·ª≠ d·ª•ng d·ªØ li·ªáu quy·ªÅn l·ª£i t·ª´ database
        if (pkg.quyenLoi && pkg.quyenLoi.length > 0) {
            return pkg.quyenLoi.map(benefit => ({
                text: benefit.tenQuyenLoi,
                description: benefit.moTa,
                icon: benefit.icon,
                type: benefit.loai
            }));
        }

        // Fallback n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu quy·ªÅn l·ª£i
        const baseFeatures = [
            'Truy c·∫≠p t·∫•t c·∫£ video b√†i t·∫≠p',
            'Theo d√µi ti·∫øn ƒë·ªô c√° nh√¢n',
            'C·ªông ƒë·ªìng h·ªó tr·ª£ online 24/7',
            'H·ªó tr·ª£ t·ª´ hu·∫•n luy·ªán vi√™n chuy√™n nghi·ªáp'
        ];

        if (pkg.loaiGoiTap === 'CaNhan') {
            return [
                ...baseFeatures,
                'K·∫ø ho·∫°ch l·∫≠p luy·ªán c√° nh√¢n h√≥a',
                'H∆∞·ªõng d·∫´n dinh d∆∞·ª°ng c∆° b·∫£n',
                'Truy c·∫≠p l·ªõp t·∫≠p nh√≥m mi·ªÖn ph√≠',
                'ƒê√°nh gi√° th·ªÉ l·ª±c ƒë·ªãnh k·ª≥',
                'T∆∞ v·∫•n s·ª©c kh·ªèe qua app'
            ].map(feature => ({ text: feature, icon: 'üí™', type: 'co_ban' }));
        } else if (pkg.loaiGoiTap === 'Nhom') {
            return [
                ...baseFeatures,
                'K·∫ø ho·∫°ch l·∫≠p luy·ªán n√¢ng cao',
                'Hu·∫•n luy·ªán dinh d∆∞·ª°ng to√†n di·ªán',
                'Truy c·∫≠p ch∆∞∆°ng tr√¨nh t·∫≠p n√¢ng cao',
                'Ph√¢n t√≠ch th√†nh ph·∫ßn c∆° th·ªÉ',
                'H·ªó tr·ª£ nh√≥m t·∫≠p luy·ªán'
            ].map(feature => ({ text: feature, icon: 'üë•', type: 'co_ban' }));
        } else {
            return [
                ...baseFeatures,
                'K·∫ø ho·∫°ch t·∫≠p v√† dinh d∆∞·ª°ng t√πy ch·ªânh ho√†n to√†n',
                'Ki·ªÉm tra h√†ng tu·∫ßn v·ªõi hu·∫•n luy·ªán vi√™n',
                'Truy c·∫≠p t·∫•t c·∫£ t√≠nh nƒÉng n·ªÅn t·∫£ng',
                'Gi·∫£m gi√° thi·∫øt b·ªã ƒë·ªôc quy·ªÅn',
                'H·ªó tr·ª£ doanh nghi·ªáp 24/7'
            ].map(feature => ({ text: feature, icon: 'üè¢', type: 'co_ban' }));
        }
    };

    const toggleServices = () => {
        setShowServices(!showServices);
    };

    if (loading) {
        return (
            <SimpleLayout onNavigateToLogin={onNavigateToLogin} onNavigateToRegister={onNavigateToRegister}>
                <div className="package-detail-loading">
                    <div className="loading-spinner">
                        <div className="spinner"></div>
                    </div>
                </div>
            </SimpleLayout>
        );
    }

    if (error) {
        return (
            <SimpleLayout onNavigateToLogin={onNavigateToLogin} onNavigateToRegister={onNavigateToRegister}>
                <div className="package-detail-error">
                    <div className="error-content">
                        <h2>‚ö†Ô∏è {error}</h2>
                        <button onClick={() => navigate('/')} className="back-button">
                            ‚Üê Quay l·∫°i trang ch·ªß
                        </button>
                    </div>
                </div>
            </SimpleLayout>
        );
    }

    if (!packageData) {
        return (
            <SimpleLayout onNavigateToLogin={onNavigateToLogin} onNavigateToRegister={onNavigateToRegister}>
                <div className="package-detail-error">
                    <div className="error-content">
                        <h2>‚ùå Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p</h2>
                        <button onClick={() => navigate('/')} className="back-button">
                            ‚Üê Quay l·∫°i trang ch·ªß
                        </button>
                    </div>
                </div>
            </SimpleLayout>
        );
    }

    return (
        <SimpleLayout onNavigateToLogin={onNavigateToLogin} onNavigateToRegister={onNavigateToRegister}>
            <div className="package-detail-page">
                {/* Package Detail Content */}
                <div className="package-detail-container">
                    <div className="package-detail-grid">
                        {/* Left Column - Image */}
                        <div className="package-image-section">
                            <div className="package-image-container">
                                {packageData.hinhAnhDaiDien ? (
                                    <img
                                        src={packageData.hinhAnhDaiDien}
                                        alt={packageData.tenGoiTap}
                                        className="package-image"
                                    />
                                ) : (
                                    <div className="package-image-placeholder">
                                        <div className="placeholder-icon">üèãÔ∏è‚Äç‚ôÇÔ∏è</div>
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* Right Column - Package Info */}
                        <div className="package-info-section">
                            <div className="package-info-content">
                                {/* Package Name */}
                                <h1 className="package-name">{packageData.tenGoiTap}</h1>

                                {/* Package Description */}
                                <p className="package-description">{packageData.moTa}</p>

                                {/* Package Type */}
                                <div className="package-type">
                                    <span className="package-type-label">Lo·∫°i g√≥i:</span>
                                    <span className="package-type-value">{getPackageTypeLabel(packageData.loaiGoiTap)}</span>
                                </div>

                                {/* Duration */}
                                <div className="package-duration">
                                    <span className="package-duration-label">Th·ªùi h·∫°n:</span>
                                    <span className="package-duration-value">{getDurationLabel(packageData.thoiHan, packageData.donViThoiHan)}</span>
                                </div>

                                {/* Rating Summary */}
                                <RatingSummary
                                    averageRating={4.5}
                                    totalReviews={127}
                                    onClick={handleRatingClick}
                                />

                                {/* Services & Benefits */}
                                <div className="package-services">
                                    <button
                                        onClick={toggleServices}
                                        className="services-title-button"
                                    >
                                        <h3 className="services-title">D·ªãch v·ª• & Quy·ªÅn l·ª£i</h3>
                                        <svg
                                            className={`services-arrow ${showServices ? 'rotated' : ''}`}
                                            fill="none"
                                            stroke="currentColor"
                                            viewBox="0 0 24 24"
                                        >
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </button>
                                    {showServices && (
                                        <ul className="services-list">
                                            {getPackageFeatures(packageData).map((feature, index) => (
                                                <li key={index} className={`service-item service-${feature.type}`}>
                                                    <span className="service-icon">{feature.icon}</span>
                                                    <div className="service-content">
                                                        <div className="service-text">{feature.text}</div>
                                                        {feature.description && (
                                                            <div className="service-description">{feature.description}</div>
                                                        )}
                                                    </div>
                                                </li>
                                            ))}
                                        </ul>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Bottom Section - Price & Actions */}
                        <div className="package-actions-section">
                            <div className="package-price-info">
                                <div className="price-display">
                                    <span className="price-amount">{formatPrice(packageData.donGia)}‚Ç´</span>
                                </div>
                                {packageData.giaGoc && packageData.giaGoc > packageData.donGia && (
                                    <div className="original-price">
                                        <span className="original-price-text">{formatPrice(packageData.giaGoc)}‚Ç´</span>
                                        <span className="discount-badge">
                                            -{Math.round((1 - packageData.donGia / packageData.giaGoc) * 100)}%
                                        </span>
                                    </div>
                                )}
                            </div>

                            <div className="action-buttons">
                                <button
                                    className="register-button"
                                    onClick={handleRegister}
                                    disabled={isRegistering}
                                >
                                    {isRegistering ? 'ƒêang ƒëƒÉng k√Ω...' : 'ƒêƒÉng k√Ω ngay'}
                                </button>
                                <button
                                    className="compare-button"
                                    onClick={handleCompareClick}
                                >
                                    So s√°nh g√≥i t·∫≠p
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Reviews Section */}
                {showReviews && (
                    <Reviews
                        packageId={id}
                        user={user}
                        onNavigateToLogin={onNavigateToLogin}
                    />
                )}

                {/* Compare Modal */}
                <CompareModal
                    isOpen={showCompareModal}
                    onClose={handleCloseCompareModal}
                    selectedPackage={selectedPackageForCompare}
                    allPackages={allPackages}
                    onNavigateToPackage={navigate}
                />
            </div>
        </SimpleLayout>
    );
};

export default PackageDetail;
