import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import SimpleLayout from '../components/layout/SimpleLayout';
import api from '../services/api';
import './PaymentSuccess.css';

const PaymentSuccess = () => {
    const navigate = useNavigate();
    const [searchParams] = useSearchParams();
    const [loading, setLoading] = useState(true);
    const [paymentStatus, setPaymentStatus] = useState(null);
    const [error, setError] = useState(null);

    const orderId = searchParams.get('orderId');

    useEffect(() => {
        if (orderId) {
            checkPaymentStatus();
        } else {
            setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng');
            setLoading(false);
        }
    }, [orderId]);

    const checkPaymentStatus = async () => {
        try {
            const response = await api.get(`/payment/status/${orderId}`);

            if (response.data.success) {
                setPaymentStatus(response.data.data);
            } else {
                setError(response.data.message || 'Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n');
            }
        } catch (err) {
            console.error('Error checking payment status:', err);
            setError('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n');
        } finally {
            setLoading(false);
        }
    };

    const handleContinue = () => {
        navigate('/');
    };

    const handleViewOrders = () => {
        navigate('/my-orders');
    };

    if (loading) {
        return (
            <SimpleLayout>
                <div className="payment-success-page">
                    <div className="loading-container">
                        <div className="loading-spinner"></div>
                        <p>ƒêang ki·ªÉm tra tr·∫°ng th√°i thanh to√°n...</p>
                    </div>
                </div>
            </SimpleLayout>
        );
    }

    if (error) {
        return (
            <SimpleLayout>
                <div className="payment-success-page">
                    <div className="error-container">
                        <div className="error-icon">‚ùå</div>
                        <h2>L·ªói x·∫£y ra</h2>
                        <p>{error}</p>
                        <button className="btn-primary" onClick={handleContinue}>
                            Quay v·ªÅ trang ch·ªß
                        </button>
                    </div>
                </div>
            </SimpleLayout>
        );
    }

    const isSuccess = paymentStatus?.status === 'DA_THANH_TOAN';
    const isPending = paymentStatus?.status === 'CHO_THANH_TOAN';
    const isFailed = paymentStatus?.status === 'THANH_TOAN_THAT_BAI';

    return (
        <SimpleLayout>
            <div className="payment-success-page">
                <div className="success-container">
                    {/* Status Icon */}
                    <div className={`status-icon ${isSuccess ? 'success' : isPending ? 'pending' : 'failed'}`}>
                        {isSuccess && '‚úÖ'}
                        {isPending && '‚è≥'}
                        {isFailed && '‚ùå'}
                    </div>

                    {/* Status Title */}
                    <h1 className="status-title">
                        {isSuccess && 'Thanh to√°n th√†nh c√¥ng!'}
                        {isPending && 'ƒêang ch·ªù thanh to√°n'}
                        {isFailed && 'Thanh to√°n th·∫•t b·∫°i'}
                    </h1>

                    {/* Status Description */}
                    <p className="status-description">
                        {isSuccess && 'C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n. G√≥i t·∫≠p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!'}
                        {isPending && 'Vui l√≤ng ho√†n t·∫•t thanh to√°n ƒë·ªÉ k√≠ch ho·∫°t g√≥i t·∫≠p.'}
                        {isFailed && 'Thanh to√°n kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.'}
                    </p>

                    {/* Payment Details */}
                    {paymentStatus && (
                        <div className="payment-details">
                            <div className="detail-item">
                                <span className="label">M√£ ƒë∆°n h√†ng:</span>
                                <span className="value">{paymentStatus.orderId}</span>
                            </div>
                            <div className="detail-item">
                                <span className="label">Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
                                <span className="value">
                                    {paymentStatus.paymentMethod === 'momo' ? 'MoMo' : 'ZaloPay'}
                                </span>
                            </div>
                            <div className="detail-item">
                                <span className="label">S·ªë ti·ªÅn:</span>
                                <span className="value">
                                    {new Intl.NumberFormat('vi-VN').format(paymentStatus.amount)}‚Ç´
                                </span>
                            </div>
                            <div className="detail-item">
                                <span className="label">Th·ªùi gian ƒëƒÉng k√Ω:</span>
                                <span className="value">
                                    {new Date(paymentStatus.registrationTime).toLocaleString('vi-VN')}
                                </span>
                            </div>
                        </div>
                    )}

                    {/* Action Buttons */}
                    <div className="action-buttons">
                        {isSuccess && (
                            <>
                                <button className="btn-primary" onClick={handleViewOrders}>
                                    Xem g√≥i t·∫≠p c·ªßa t√¥i
                                </button>
                                <button className="btn-secondary" onClick={handleContinue}>
                                    Ti·∫øp t·ª•c mua s·∫Øm
                                </button>
                            </>
                        )}

                        {isPending && (
                            <>
                                <button className="btn-primary" onClick={() => window.location.reload()}>
                                    Ki·ªÉm tra l·∫°i
                                </button>
                                <button className="btn-secondary" onClick={handleContinue}>
                                    Quay v·ªÅ trang ch·ªß
                                </button>
                            </>
                        )}

                        {isFailed && (
                            <>
                                <button className="btn-primary" onClick={() => navigate(-1)}>
                                    Th·ª≠ l·∫°i thanh to√°n
                                </button>
                                <button className="btn-secondary" onClick={handleContinue}>
                                    Quay v·ªÅ trang ch·ªß
                                </button>
                            </>
                        )}
                    </div>

                    {/* Additional Info */}
                    {isSuccess && (
                        <div className="success-info">
                            <h3>üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Billions Fitness & Gym!</h3>
                            <div className="info-grid">
                                <div className="info-item">
                                    <div className="info-icon">üèãÔ∏è</div>
                                    <div className="info-text">
                                        <h4>B·∫Øt ƒë·∫ßu t·∫≠p luy·ªán</h4>
                                        <p>G√≥i t·∫≠p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t. H√£y ƒë·∫øn ph√≤ng gym ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh fitness!</p>
                                    </div>
                                </div>
                                <div className="info-item">
                                    <div className="info-icon">üì±</div>
                                    <div className="info-text">
                                        <h4>Qu·∫£n l√Ω l·ªãch t·∫≠p</h4>
                                        <p>ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n ƒë·ªÉ xem l·ªãch t·∫≠p v√† qu·∫£n l√Ω th√¥ng tin c√° nh√¢n.</p>
                                    </div>
                                </div>
                                <div className="info-item">
                                    <div className="info-icon">üí™</div>
                                    <div className="info-text">
                                        <h4>H·ªó tr·ª£ 24/7</h4>
                                        <p>ƒê·ªôi ng≈© PT v√† nh√¢n vi√™n lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n trong su·ªët qu√° tr√¨nh t·∫≠p luy·ªán.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Contact Support */}
                    <div className="contact-support">
                        <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá:</p>
                        <div className="contact-info">
                            <span>üìû Hotline: 1900 123 456</span>
                            <span>‚úâÔ∏è Email: support@billionsfitness.com</span>
                        </div>
                    </div>
                </div>
            </div>
        </SimpleLayout>
    );
};

export default PaymentSuccess;
