import React, { useState, useEffect } from 'react';
import { api } from '../services/api';

const PricingPlans = () => {
    const [packages, setPackages] = useState([]);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('CaNhan');
    const [selectedPeriod, setSelectedPeriod] = useState('monthly');

    useEffect(() => {
        fetchPackages();
    }, []);

    useEffect(() => {
        // T·ª± ƒë·ªông ch·ªçn period ph√π h·ª£p khi thay ƒë·ªïi tab
        const filteredPackages = packages.filter(pkg => pkg.loaiGoiTap === activeTab);
        if (filteredPackages.length > 0) {
            const hasMonthly = filteredPackages.some(pkg => pkg.thoiHan < 365);
            const hasYearly = filteredPackages.some(pkg => pkg.thoiHan >= 365 && pkg.thoiHan < 5000);
            const hasLifetime = filteredPackages.some(pkg => pkg.thoiHan >= 36500);

            // ∆Øu ti√™n ch·ªçn period theo th·ª© t·ª±: monthly -> yearly -> lifetime
            if (hasMonthly) {
                setSelectedPeriod('monthly');
            } else if (hasYearly) {
                setSelectedPeriod('yearly');
            } else if (hasLifetime) {
                setSelectedPeriod('lifetime');
            }
        }
    }, [activeTab, packages]);

    const fetchPackages = async () => {
        try {
            setLoading(true);
            console.log('üîç Fetching packages from API...');
            const response = await api.get('/goitap', {}, false);
            console.log('üì¶ API Response:', response);
            console.log('üì¶ Response type:', typeof response);
            console.log('üì¶ Is array:', Array.isArray(response));

            const activePackages = Array.isArray(response) ? response.filter(pkg => pkg.kichHoat) : [];
            console.log('‚úÖ Active packages:', activePackages);
            setPackages(activePackages);
        } catch (error) {
            console.error('‚ùå Error fetching packages:', error);
            setPackages([]);
        } finally {
            setLoading(false);
        }
    };

    const packageTypes = {
        'CaNhan': 'üí™ C√° Nh√¢n',
        'Nhom': 'üë• Nh√≥m',
        'CongTy': 'üè¢ C√¥ng Ty'
    };

    const getAvailablePeriods = () => {
        const filteredPackages = packages.filter(pkg => pkg.loaiGoiTap === activeTab);
        const periods = [];

        const hasMonthly = filteredPackages.some(pkg => pkg.thoiHan < 365);
        const hasYearly = filteredPackages.some(pkg => pkg.thoiHan >= 365 && pkg.thoiHan < 5000);
        const hasLifetime = filteredPackages.some(pkg => pkg.thoiHan >= 36500);

        if (hasMonthly) periods.push({ key: 'monthly', label: 'üìÖ Theo th√°ng' });
        if (hasYearly) periods.push({ key: 'yearly', label: 'üìÜ Theo nƒÉm' });
        if (hasLifetime) periods.push({ key: 'lifetime', label: '‚ôæÔ∏è Vƒ©nh vi·ªÖn' });

        return periods;
    };

    const getFilteredPackages = () => {
        return packages.filter(pkg => {
            if (pkg.loaiGoiTap !== activeTab) return false;

            // Ph√¢n lo·∫°i d·ª±a tr√™n thoiHan
            const thoiHan = pkg.thoiHan;

            switch (selectedPeriod) {
                case 'monthly':
                    return thoiHan < 365; // D∆∞·ªõi 365 ng√†y
                case 'yearly':
                    return thoiHan >= 365 && thoiHan < 5000; // T·ª´ 365 ƒë·∫øn d∆∞·ªõi 5000 ng√†y
                case 'lifetime':
                    return thoiHan >= 36500; // T·ª´ 36500 ng√†y tr·ªü l√™n
                default:
                    return true;
            }
        });
    };

    const formatPrice = (price) => {
        return new Intl.NumberFormat('vi-VN').format(price);
    };

    const getBorderColor = (index) => {
        const colors = ['#f97316', '#dc2626', '#f97316']; // Orange, Red, Orange
        return colors[index % colors.length];
    };

    const getButtonColor = (index) => {
        const colors = ['#f97316', '#dc2626', '#f97316']; // Orange, Red, Orange
        return colors[index % colors.length];
    };

    const getPackageFeatures = (pkg) => {
        const baseFeatures = [
            'Truy c·∫≠p t·∫•t c·∫£ video b√†i t·∫≠p',
            'Theo d√µi ti·∫øn ƒë·ªô',
            'C·ªông ƒë·ªìng h·ªó tr·ª£ online'
        ];

        if (pkg.loaiGoiTap === 'CaNhan') {
            return [
                ...baseFeatures,
                'K·∫ø ho·∫°ch t·∫≠p luy·ªán c√° nh√¢n h√≥a',
                'H∆∞·ªõng d·∫´n dinh d∆∞·ª°ng c∆° b·∫£n',
                'Truy c·∫≠p l·ªõp t·∫≠p nh√≥m',
                `Th·ªùi h·∫°n: ${pkg.thoiHan} ${pkg.donViThoiHan.toLowerCase()}`
            ];
        } else if (pkg.loaiGoiTap === 'Nhom') {
            return [
                ...baseFeatures,
                'K·∫ø ho·∫°ch t·∫≠p luy·ªán n√¢ng cao',
                'Hu·∫•n luy·ªán dinh d∆∞·ª°ng to√†n di·ªán',
                'Truy c·∫≠p ch∆∞∆°ng tr√¨nh t·∫≠p n√¢ng cao',
                'Ph√¢n t√≠ch th√†nh ph·∫ßn c∆° th·ªÉ',
                `Th·ªùi h·∫°n: ${pkg.thoiHan} ${pkg.donViThoiHan.toLowerCase()}`
            ];
        } else {
            return [
                ...baseFeatures,
                'K·∫ø ho·∫°ch t·∫≠p v√† dinh d∆∞·ª°ng t√πy ch·ªânh ho√†n to√†n',
                'Ki·ªÉm tra h√†ng tu·∫ßn v·ªõi hu·∫•n luy·ªán vi√™n',
                'Truy c·∫≠p t·∫•t c·∫£ t√≠nh nƒÉng n·ªÅn t·∫£ng',
                'Gi·∫£m gi√° thi·∫øt b·ªã ƒë·ªôc quy·ªÅn',
                `Th·ªùi h·∫°n: ${pkg.thoiHan} ${pkg.donViThoiHan.toLowerCase()}`
            ];
        }
    };

    if (loading) {
        return (
            <section className="pricing-section">
                <div className="container">
                    <div className="text-center py-16">
                        <div className="text-white text-xl">ƒêang t·∫£i g√≥i t·∫≠p...</div>
                    </div>
                </div>
            </section>
        );
    }

    const filteredPackages = getFilteredPackages();

    return (
        <section className="pricing-section">
            <div className="container">
                {/* Header */}
                <div className="pricing-header">
                    <h2 className="pricing-title">
                        <span className="text-gray-400">KH√ÅM PH√Å</span> <span className="text-red-600">G√ìI T·∫¨P</span> <span className="text-gray-400">HO√ÄN H·∫¢O</span>
                    </h2>
                    <p className="pricing-subtitle">
                        L·ª±a ch·ªçn g√≥i t·∫≠p ph√π h·ª£p v·ªõi m·ª•c ti√™u v√† ng√¢n s√°ch c·ªßa b·∫°n. T·ª´ g√≥i c√° nh√¢n ƒë·∫øn g√≥i doanh nghi·ªáp, ch√∫ng t√¥i c√≥ gi·∫£i ph√°p t·ªëi ∆∞u cho m·ªçi nhu c·∫ßu fitness.
                    </p>
                </div>

                {/* Billing Cycle Toggle */}
                {getAvailablePeriods().length > 1 && (
                    <div className="billing-toggle">
                        {getAvailablePeriods().map((period) => (
                            <button
                                key={period.key}
                                className={`billing-btn ${selectedPeriod === period.key ? 'active' : ''}`}
                                onClick={() => setSelectedPeriod(period.key)}
                            >
                                {period.label}
                            </button>
                        ))}
                    </div>
                )}

                {/* Package Type Tabs */}
                <div className="package-tabs">
                    {Object.entries(packageTypes).map(([key, label]) => (
                        <button
                            key={key}
                            className={`package-tab ${activeTab === key ? 'active' : ''}`}
                            onClick={() => setActiveTab(key)}
                        >
                            {label}
                        </button>
                    ))}
                </div>

                {/* Pricing Cards */}
                <div className="pricing-cards">
                    {filteredPackages.length > 0 ? (
                        filteredPackages.map((pkg, index) => (
                            <div
                                key={pkg._id}
                                className="pricing-card"
                                style={{ borderColor: getBorderColor(index) }}
                            >
                                <div className="package-label" style={{ color: getBorderColor(index) }}>
                                    G√≥i t·∫≠p
                                </div>
                                <h3 className="package-name">{pkg.tenGoiTap}</h3>
                                <p className="package-description">{pkg.moTa}</p>

                                <ul className="package-features">
                                    {getPackageFeatures(pkg).map((feature, idx) => (
                                        <li key={idx}>{feature}</li>
                                    ))}
                                </ul>

                                <div className="package-price">
                                    <span className="price-amount">
                                        {formatPrice(pkg.donGia)}‚Ç´
                                    </span>
                                    <span className="price-period">
                                        /{selectedPeriod === 'monthly' ? 'th√°ng' :
                                            selectedPeriod === 'yearly' ? 'nƒÉm' :
                                                selectedPeriod === 'lifetime' ? 'l·∫ßn' : pkg.donViThoiHan.toLowerCase()}
                                    </span>
                                    {pkg.giaGoc && pkg.giaGoc > pkg.donGia && (
                                        <div className="original-price">
                                            <span className="original-price-text">
                                                {formatPrice(pkg.giaGoc)}‚Ç´
                                            </span>
                                            <span className="discount-badge">
                                                -{Math.round((1 - pkg.donGia / pkg.giaGoc) * 100)}%
                                            </span>
                                        </div>
                                    )}
                                </div>

                                <button
                                    className="choose-plan-btn"
                                    style={{ backgroundColor: getButtonColor(index) }}
                                >
                                    Ch·ªçn g√≥i n√†y
                                </button>
                            </div>
                        ))
                    ) : (
                        <div className="no-packages">
                            <p className="text-gray-400">Kh√¥ng c√≥ g√≥i t·∫≠p n√†o cho lo·∫°i {packageTypes[activeTab]}</p>
                        </div>
                    )}
                </div>
            </div>
        </section>
    );
};

export default PricingPlans;
