const UserNotification = require('../models/UserNotification');
const GoiTap = require('../models/GoiTap');
const ChiTietGoiTap = require('../models/ChiTietGoiTap');
const NguoiDung = require('../models/NguoiDung');

// L·∫•y danh s√°ch th√¥ng b√°o c·ªßa user
const getUserNotifications = async (req, res) => {
    try {
        const { userId } = req.params;
        const { page = 1, limit = 10 } = req.query;

        const notifications = await UserNotification.find({ userId: userId })
            .populate('duLieuLienQuan.goiTapId', 'tenGoiTap donGia thoiHan donViThoiHan')
            .sort({ createdAt: -1 })
            .limit(limit * 1)
            .skip((page - 1) * limit);

        const total = await UserNotification.countDocuments({ userId: userId });

        res.json({
            success: true,
            data: {
                notifications,
                totalPages: Math.ceil(total / limit),
                currentPage: page,
                total
            }
        });
    } catch (error) {
        console.error('Error getting user notifications:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y th√¥ng b√°o'
        });
    }
};

// ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
const markAsRead = async (req, res) => {
    try {
        const { notificationId } = req.params;
        const { userId } = req.body;

        const notification = await UserNotification.findOneAndUpdate(
            { _id: notificationId, userId: userId },
            {
                daDoc: true,
                thoiGianDoc: new Date()
            },
            { new: true }
        );

        if (!notification) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
            });
        }

        res.json({
            success: true,
            message: 'ƒê√£ ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc'
        });
    } catch (error) {
        console.error('Error marking notification as read:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o'
        });
    }
};

// ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
const markAllAsRead = async (req, res) => {
    try {
        const { userId } = req.body;

        await UserNotification.updateMany(
            { userId: userId, daDoc: false },
            {
                daDoc: true,
                thoiGianDoc: new Date()
            }
        );

        res.json({
            success: true,
            message: 'ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc'
        });
    } catch (error) {
        console.error('Error marking all notifications as read:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o'
        });
    }
};

// L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
const getUnreadCount = async (req, res) => {
    try {
        const { userId } = req.params;

        const unreadCount = await UserNotification.countDocuments({
            userId: userId,
            daDoc: false
        });

        res.json({
            success: true,
            data: { unreadCount }
        });
    } catch (error) {
        console.error('Error getting unread count:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc'
        });
    }
};

// T·∫°o th√¥ng b√°o m·ªõi (d√πng cho payment success)
const createNotification = async (userId, notificationData) => {
    try {
        const notification = new UserNotification({
            userId: userId,
            ...notificationData
        });

        await notification.save();
        return notification;
    } catch (error) {
        console.error('Error creating notification:', error);
        throw error;
    }
};

// T·∫°o th√¥ng b√°o thanh to√°n th√†nh c√¥ng
const createPaymentSuccessNotification = async (userId, packageData, chiTietGoiTapId) => {
    try {
        console.log(`üîç [NOTIFICATION] Attempting to create payment success notification for userId: ${userId}, chiTietGoiTapId: ${chiTietGoiTapId}`);

        // S·ª≠ d·ª•ng findOneAndUpdate v·ªõi upsert ƒë·ªÉ tr√°nh race condition
        const existingNotification = await UserNotification.findOneAndUpdate(
            {
                userId: userId,
                loaiThongBao: 'PAYMENT_SUCCESS',
                'duLieuLienQuan.chiTietGoiTapId': chiTietGoiTapId
            },
            {
                // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o m·ªõi v·ªõi d·ªØ li·ªáu n√†y
                userId: userId,
                tieuDe: `Thanh to√°n g√≥i t·∫≠p th√†nh c√¥ng ‚Äî ${packageData.tenGoiTap}`,
                noiDung: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng g√≥i t·∫≠p "${packageData.tenGoiTap}". 

üìÖ Th·ªùi h·∫°n: ${packageData.thoiHan} ${packageData.donViThoiHan}
üí∞ Gi√°: ${packageData.donGia.toLocaleString('vi-VN')} VND

üéØ C√°c b∆∞·ªõc ti·∫øp theo:
‚Ä¢ Ho√†n thi·ªán th√¥ng tin ƒëƒÉng k√Ω g√≥i t·∫≠p
‚Ä¢ Ch·ªçn l·ªãch t·∫≠p ph√π h·ª£p
‚Ä¢ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh fitness c·ªßa b·∫°n

üí™ H√£y t·∫≠n d·ª•ng t·ªëi ƒëa g√≥i t·∫≠p ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u fitness c·ªßa b·∫°n!`,
                loaiThongBao: 'PAYMENT_SUCCESS',
                daDoc: false,
                duLieuLienQuan: {
                    goiTapId: packageData._id,
                    chiTietGoiTapId: chiTietGoiTapId
                }
            },
            {
                upsert: true, // T·∫°o m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y
                new: true,    // Tr·∫£ v·ªÅ document sau khi update
                setDefaultsOnInsert: true
            }
        );

        if (existingNotification.isNew) {
            console.log(`‚úÖ [NOTIFICATION] Created new payment success notification for userId: ${userId}, chiTietGoiTapId: ${chiTietGoiTapId}, id: ${existingNotification._id}`);
        } else {
            console.log(`üîç [NOTIFICATION] Found existing payment success notification for userId: ${userId}, chiTietGoiTapId: ${chiTietGoiTapId}, id: ${existingNotification._id}`);
        }

        return existingNotification;
    } catch (error) {
        console.error('Error in createPaymentSuccessNotification:', error);
        throw error;
    }
};

// T·∫°o th√¥ng b√°o n√¢ng c·∫•p g√≥i t·∫≠p th√†nh c√¥ng
const createUpgradeSuccessNotification = async (userId, newPackageData, oldPackageData, upgradeInfo, chiTietGoiTapId) => {
    try {
        console.log(`üîç [NOTIFICATION] Attempting to create upgrade success notification for userId: ${userId}, chiTietGoiTapId: ${chiTietGoiTapId}`);

        // S·ª≠ d·ª•ng findOneAndUpdate v·ªõi upsert ƒë·ªÉ tr√°nh race condition
        const existingNotification = await UserNotification.findOneAndUpdate(
            {
                userId: userId,
                loaiThongBao: 'UPGRADE_SUCCESS',
                'duLieuLienQuan.chiTietGoiTapId': chiTietGoiTapId
            },
            {
                // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o m·ªõi v·ªõi d·ªØ li·ªáu n√†y
                userId: userId,
                tieuDe: `N√¢ng c·∫•p g√≥i t·∫≠p th√†nh c√¥ng ‚Äî ${newPackageData.tenGoiTap}`,
                noiDung: `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ n√¢ng c·∫•p g√≥i t·∫≠p th√†nh c√¥ng!

üì¶ G√≥i c≈©: ${oldPackageData.tenGoiTap}
üì¶ G√≥i m·ªõi: ${newPackageData.tenGoiTap}
üí∞ S·ªë ti·ªÅn b√π: ${upgradeInfo.soTienBu.toLocaleString('vi-VN')} VND
üìÖ Th·ªùi h·∫°n g√≥i m·ªõi: ${newPackageData.thoiHan} ${newPackageData.donViThoiHan}

üéØ C√°c b∆∞·ªõc ti·∫øp theo:
‚Ä¢ G√≥i c≈© ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông ng·ª´ng ho·∫°t ƒë·ªông
‚Ä¢ G√≥i m·ªõi ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng
‚Ä¢ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh fitness v·ªõi g√≥i t·∫≠p m·ªõi

üí™ H√£y t·∫≠n d·ª•ng t·ªëi ƒëa g√≥i t·∫≠p n√¢ng c·∫•p ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u fitness c·ªßa b·∫°n!`,
                loaiThongBao: 'UPGRADE_SUCCESS',
                daDoc: false,
                duLieuLienQuan: {
                    goiTapId: newPackageData._id,
                    chiTietGoiTapId: chiTietGoiTapId,
                    oldPackageId: oldPackageData._id,
                    upgradeInfo: {
                        soTienBu: upgradeInfo.soTienBu,
                        isUpgrade: upgradeInfo.isUpgrade,
                        ghiChu: upgradeInfo.ghiChu
                    }
                }
            },
            {
                upsert: true, // T·∫°o m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y
                new: true,    // Tr·∫£ v·ªÅ document sau khi update
                setDefaultsOnInsert: true
            }
        );

        if (existingNotification.isNew) {
            console.log(`‚úÖ [NOTIFICATION] Created new upgrade success notification for userId: ${userId}, chiTietGoiTapId: ${chiTietGoiTapId}, id: ${existingNotification._id}`);
        } else {
            console.log(`üîç [NOTIFICATION] Found existing upgrade success notification for userId: ${userId}, chiTietGoiTapId: ${chiTietGoiTapId}, id: ${existingNotification._id}`);
        }

        return existingNotification;
    } catch (error) {
        console.error('Error in createUpgradeSuccessNotification:', error);
        throw error;
    }
};

// T·∫°o th√¥ng b√°o cho ng∆∞·ªùi th·ª© 2 trong g√≥i t·∫≠p 2 ng∆∞·ªùi
const createPartnerAddedNotification = async (userId, packageData, partnerName, chiTietGoiTapId) => {
    try {
        console.log(`üîç [NOTIFICATION] Attempting to create partner notification for userId: ${userId}, packageId: ${packageData._id}, chiTietGoiTapId: ${chiTietGoiTapId}`);

        // S·ª≠ d·ª•ng findOneAndUpdate v·ªõi upsert ƒë·ªÉ tr√°nh race condition
        const existingNotification = await UserNotification.findOneAndUpdate(
            {
                userId: userId,
                loaiThongBao: 'PACKAGE_ADDED',
                'duLieuLienQuan.goiTapId': packageData._id,
                'duLieuLienQuan.chiTietGoiTapId': chiTietGoiTapId
            },
            {
                // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o m·ªõi v·ªõi d·ªØ li·ªáu n√†y
                userId: userId,
                tieuDe: `B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o g√≥i t·∫≠p ‚Äî ${packageData.tenGoiTap}`,
                noiDung: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ${partnerName} th√™m v√†o g√≥i t·∫≠p "${packageData.tenGoiTap}".

üìÖ Th·ªùi h·∫°n: ${packageData.thoiHan} ${packageData.donViThoiHan}
üë• G√≥i t·∫≠p: 2 ng∆∞·ªùi

üéØ C√°c b∆∞·ªõc ti·∫øp theo:
‚Ä¢ Ho√†n thi·ªán th√¥ng tin c√° nh√¢n
‚Ä¢ ƒê·ªìng b·ªô l·ªãch t·∫≠p v·ªõi b·∫°n t·∫≠p
‚Ä¢ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh fitness c√πng nhau

üí™ H√£y c√πng nhau ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u fitness!`,
                loaiThongBao: 'PACKAGE_ADDED',
                daDoc: false,
                duLieuLienQuan: {
                    goiTapId: packageData._id,
                    chiTietGoiTapId: chiTietGoiTapId
                }
            },
            {
                upsert: true, // T·∫°o m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y
                new: true,    // Tr·∫£ v·ªÅ document sau khi update
                setDefaultsOnInsert: true
            }
        );

        if (existingNotification.isNew) {
            console.log(`‚úÖ [NOTIFICATION] Created new partner notification for userId: ${userId}, packageId: ${packageData._id}, chiTietGoiTapId: ${chiTietGoiTapId}, id: ${existingNotification._id}`);
        } else {
            console.log(`üîç [NOTIFICATION] Found existing partner notification for userId: ${userId}, packageId: ${packageData._id}, chiTietGoiTapId: ${chiTietGoiTapId}, id: ${existingNotification._id}`);
        }

        return existingNotification;
    } catch (error) {
        console.error('Error in createPartnerAddedNotification:', error);
        throw error;
    }
};

// Test t·∫°o notification
const testCreateNotification = async (req, res) => {
    try {
        const { userId } = req.body;

        const notification = new UserNotification({
            userId: userId,
            tieuDe: 'Test Notification',
            noiDung: 'ƒê√¢y l√† th√¥ng b√°o test',
            daDoc: false
        });

        await notification.save();

        res.json({
            success: true,
            message: 'T·∫°o notification test th√†nh c√¥ng',
            data: notification
        });
    } catch (error) {
        console.error('Error creating test notification:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói t·∫°o notification test',
            error: error.message
        });
    }
};

// Test unread count
const testUnreadCount = async (req, res) => {
    try {
        const { userId } = req.params;
        console.log('Testing unread count for user:', userId);

        const unreadCount = await UserNotification.countDocuments({
            userId: userId,
            daDoc: false
        });

        console.log('Unread count result:', unreadCount);

        res.json({
            success: true,
            data: { unreadCount },
            message: 'Test unread count th√†nh c√¥ng'
        });
    } catch (error) {
        console.error('Error in test unread count:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói test unread count',
            error: error.message
        });
    }
};

// Test t·∫°o workflow notification
const testCreateWorkflowNotification = async (req, res) => {
    try {
        const { userId, registrationId, packageName } = req.body;

        if (!userId || !registrationId || !packageName) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: userId, registrationId, packageName'
            });
        }

        console.log(`üîç [TEST] Creating test workflow notification for userId: ${userId}, registrationId: ${registrationId}`);

        const notification = await createWorkflowNotification(
            userId,
            registrationId,
            packageName,
            false
        );

        res.json({
            success: true,
            message: 'T·∫°o workflow notification test th√†nh c√¥ng',
            data: notification
        });
    } catch (error) {
        console.error('Error creating test workflow notification:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói t·∫°o workflow notification test',
            error: error.message
        });
    }
};

// T·∫°o th√¥ng b√°o workflow cho ng∆∞·ªùi thanh to√°n
const createWorkflowNotification = async (userId, registrationId, packageName, isUpgrade = false) => {
    try {
        console.log(`üîç [NOTIFICATION] Creating workflow notification for userId: ${userId}, registrationId: ${registrationId}`);

        const notification = await UserNotification.findOneAndUpdate(
            {
                userId: userId,
                loaiThongBao: 'WORKFLOW',
                'duLieuLienQuan.registrationId': registrationId
            },
            {
                userId: userId,
                tieuDe: isUpgrade ? 'Ho√†n t·∫•t n√¢ng c·∫•p g√≥i t·∫≠p' : 'Ho√†n t·∫•t ƒëƒÉng k√Ω g√≥i t·∫≠p',
                noiDung: `Vui l√≤ng ho√†n th√†nh c√°c b∆∞·ªõc sau ƒë·ªÉ ho√†n t·∫•t vi·ªác ${isUpgrade ? 'n√¢ng c·∫•p' : 'ƒëƒÉng k√Ω'} g√≥i t·∫≠p ${packageName}`,
                loaiThongBao: 'WORKFLOW',
                daDoc: false,
                duLieuLienQuan: {
                    registrationId: registrationId,
                    workflowType: isUpgrade ? 'upgrade' : 'registration',
                    packageName: packageName,
                    actionUrl: `/package-workflow/${registrationId}`
                }
            },
            {
                upsert: true,
                new: true,
                setDefaultsOnInsert: true
            }
        );

        console.log(`‚úÖ [NOTIFICATION] Created workflow notification for userId: ${userId}, registrationId: ${registrationId}, id: ${notification._id}`);
        return notification;
    } catch (error) {
        console.error('Error in createWorkflowNotification:', error);
        throw error;
    }
};

// T·∫°o th√¥ng b√°o workflow cho ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi
const createPartnerWorkflowNotification = async (partnerUserId, registrationId, packageName, ownerName) => {
    try {
        console.log(`üîç [NOTIFICATION] Creating partner workflow notification for userId: ${partnerUserId}, registrationId: ${registrationId}`);

        const notification = await UserNotification.findOneAndUpdate(
            {
                userId: partnerUserId,
                loaiThongBao: 'WORKFLOW',
                'duLieuLienQuan.registrationId': registrationId,
                'duLieuLienQuan.workflowType': 'partner'
            },
            {
                userId: partnerUserId,
                tieuDe: 'Ho√†n t·∫•t ƒëƒÉng k√Ω g√≥i t·∫≠p',
                noiDung: `${ownerName} ƒë√£ m·ªùi b·∫°n tham gia g√≥i t·∫≠p ${packageName}. Vui l√≤ng ho√†n th√†nh c√°c b∆∞·ªõc ƒë·ªÉ b·∫Øt ƒë·∫ßu t·∫≠p luy·ªán`,
                loaiThongBao: 'WORKFLOW',
                daDoc: false,
                duLieuLienQuan: {
                    registrationId: registrationId,
                    workflowType: 'partner',
                    packageName: packageName,
                    ownerName: ownerName,
                    actionUrl: `/package-workflow/${registrationId}`
                }
            },
            {
                upsert: true,
                new: true,
                setDefaultsOnInsert: true
            }
        );

        console.log(`‚úÖ [NOTIFICATION] Created partner workflow notification for userId: ${partnerUserId}, registrationId: ${registrationId}, id: ${notification._id}`);
        return notification;
    } catch (error) {
        console.error('Error in createPartnerWorkflowNotification:', error);
        throw error;
    }
};

module.exports = {
    getUserNotifications,
    markAsRead,
    markAllAsRead,
    getUnreadCount,
    createNotification,
    createPaymentSuccessNotification,
    createUpgradeSuccessNotification,
    createPartnerAddedNotification,
    createWorkflowNotification,
    createPartnerWorkflowNotification,
    testCreateNotification,
    testUnreadCount,
    testCreateWorkflowNotification
};
