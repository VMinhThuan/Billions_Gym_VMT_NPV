const ChiTietGoiTap = require('../models/ChiTietGoiTap');
const GoiTap = require('../models/GoiTap');
const { NguoiDung, PT } = require('../models/NguoiDung');
const LichTap = require('../models/LichTap');
const BuoiTap = require('../models/BuoiTap');
const LichLamViecPT = require('../models/LichLamViecPT');
const ChiNhanh = require('../models/ChiNhanh');
const mongoose = require('mongoose');

// L·∫•y danh s√°ch PT ph√π h·ª£p sau khi ƒëƒÉng k√Ω g√≥i t·∫≠p th√†nh c√¥ng
const getAvailableTrainers = async (req, res) => {
    try {
        console.log('üîç getAvailableTrainers called with:', req.params, req.body);
        const { chiTietGoiTapId } = req.params;
        const { gioTapUuTien, soNgayTapTrongTuan = 3 } = req.body;

        // Validate ID
        if (!mongoose.Types.ObjectId.isValid(chiTietGoiTapId)) {
            return res.status(400).json({ message: 'ID ƒëƒÉng k√Ω g√≥i t·∫≠p kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra chi ti·∫øt g√≥i t·∫≠p
        console.log('üîç Finding ChiTietGoiTap with ID:', chiTietGoiTapId);
        const chiTietGoiTap = await ChiTietGoiTap.findById(chiTietGoiTapId)
            .populate('maGoiTap')
            .populate('maHoiVien');

        console.log('üîç ChiTietGoiTap found:', chiTietGoiTap);

        if (!chiTietGoiTap) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω g√≥i t·∫≠p' });
        }

        if (chiTietGoiTap.trangThaiThanhToan !== 'DA_THANH_TOAN') {
            return res.status(400).json({ message: 'G√≥i t·∫≠p ch∆∞a ƒë∆∞·ª£c thanh to√°n' });
        }

        // L·∫•y t·∫•t c·∫£ PT ƒëang ho·∫°t ƒë·ªông
        console.log('üîç PT model:', typeof PT, PT);
        let allPTs = await PT.find({ trangThaiPT: 'DANG_HOAT_DONG' });
        console.log('üîç Found PTs via discriminator:', allPTs.length);

        // Fallback: n·∫øu d·ªØ li·ªáu c≈© kh√¥ng d√πng discriminator, t√¨m theo vaiTro t·ª´ collection NguoiDung
        if (!allPTs || allPTs.length === 0) {
            console.log('üîç No PT found via discriminator. Falling back to NguoiDung.find({ vaiTro: "PT" })');
            allPTs = await NguoiDung.find({ vaiTro: 'PT' });
            console.log('üîç Found PTs via base model:', allPTs.length);
        }

        // N·∫øu c√≥ gi·ªù t·∫≠p ∆∞u ti√™n, l·ªçc PT c√≥ th·ªùi gian r·∫£nh ph√π h·ª£p
        let availablePTs = allPTs;

        if (gioTapUuTien && gioTapUuTien.length > 0) {
            const ptAvailability = await Promise.all(
                allPTs.map(async (pt) => {
                    const lichLamViec = await LichLamViecPT.find({ pt: pt._id });

                    // Ki·ªÉm tra xem PT c√≥ th·ªùi gian r·∫£nh trong khung gi·ªù ∆∞u ti√™n kh√¥ng
                    const hasAvailableTime = lichLamViec.some(lich =>
                        lich.gioLamViec.some(gio =>
                            gio.trangThai === 'RANH' &&
                            gioTapUuTien.some(gioUuTien => {
                                const [gioStart, gioEnd] = gioUuTien.split('-');
                                return gio.gioBatDau <= gioStart && gio.gioKetThuc >= gioEnd;
                            })
                        )
                    );

                    return hasAvailableTime ? pt : null;
                })
            );

            availablePTs = ptAvailability.filter(pt => pt !== null);
        }

        // S·∫Øp x·∫øp PT theo ƒë√°nh gi√° v√† kinh nghi·ªám
        availablePTs.sort((a, b) => {
            if (b.danhGia !== a.danhGia) {
                return (b.danhGia || 0) - (a.danhGia || 0);
            }
            return (b.kinhNghiem || 0) - (a.kinhNghiem || 0);
        });

        // C·∫≠p nh·∫≠t th√¥ng tin ∆∞u ti√™n c·ªßa kh√°ch h√†ng
        await ChiTietGoiTap.findByIdAndUpdate(chiTietGoiTapId, {
            gioTapUuTien,
            soNgayTapTrongTuan
        });

        res.json({
            success: true,
            data: {
                availablePTs,
                chiTietGoiTap,
                recommendedPT: availablePTs[0] || null
            }
        });

    } catch (error) {
        console.error('Error getting available trainers:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch PT' });
    }
};

// Ch·ªçn PT cho g√≥i t·∫≠p
const selectTrainer = async (req, res) => {
    try {
        const { chiTietGoiTapId } = req.params;
        const { ptId, gioTapUuTien, soNgayTapTrongTuan } = req.body;

        // Ki·ªÉm tra chi ti·∫øt g√≥i t·∫≠p
        const chiTietGoiTap = await ChiTietGoiTap.findById(chiTietGoiTapId);
        if (!chiTietGoiTap) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω g√≥i t·∫≠p' });
        }

        // Ki·ªÉm tra PT
        const pt = await PT.findOne({ _id: ptId, trangThaiPT: 'DANG_HOAT_DONG' });
        if (!pt) {
            return res.status(404).json({ message: 'PT kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông' });
        }

        // C·∫≠p nh·∫≠t th√¥ng tin ch·ªçn PT
        const updatedChiTiet = await ChiTietGoiTap.findByIdAndUpdate(
            chiTietGoiTapId,
            {
                ptDuocChon: ptId,
                ngayChonPT: new Date(),
                trangThaiDangKy: 'DA_CHON_PT',
                gioTapUuTien,
                soNgayTapTrongTuan
            },
            { new: true }
        ).populate('ptDuocChon').populate('maGoiTap');

        res.json({
            success: true,
            message: 'ƒê√£ ch·ªçn PT th√†nh c√¥ng',
            data: updatedChiTiet
        });

    } catch (error) {
        console.error('Error selecting trainer:', error);
        res.status(500).json({ message: 'L·ªói server khi ch·ªçn PT' });
    }
};

// T·∫°o l·ªãch t·∫≠p d·ª±a tr√™n g√≥i t·∫≠p v√† PT ƒë√£ ch·ªçn
const generateWorkoutSchedule = async (req, res) => {
    try {
        const { chiTietGoiTapId } = req.params;
        const { cacNgayTap, khungGioTap } = req.body;

        // L·∫•y th√¥ng tin chi ti·∫øt g√≥i t·∫≠p
        const chiTietGoiTap = await ChiTietGoiTap.findById(chiTietGoiTapId)
            .populate('maGoiTap')
            .populate('ptDuocChon')
            .populate('maHoiVien');

        if (!chiTietGoiTap || chiTietGoiTap.trangThaiDangKy !== 'DA_CHON_PT') {
            return res.status(400).json({ message: 'Ch∆∞a ch·ªçn PT ho·∫∑c tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
        }

        const goiTap = chiTietGoiTap.maGoiTap;

        console.log('üîç GoiTap info:', {
            tenGoiTap: goiTap.tenGoiTap,
            thoiHan: goiTap.thoiHan,
            donViThoiHan: goiTap.donViThoiHan
        });

        // T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c d·ª±a tr√™n g√≥i t·∫≠p
        const ngayBatDau = new Date();
        // T√≠nh ng√†y k·∫øt th√∫c d·ª±a tr√™n th·ªùi h·∫°n g√≥i t·∫≠p
        const ngayKetThuc = new Date(ngayBatDau);

        // T√≠nh to√°n d·ª±a tr√™n ƒë∆°n v·ªã th·ªùi h·∫°n
        if (goiTap.donViThoiHan === 'Th√°ng') {
            ngayKetThuc.setMonth(ngayKetThuc.getMonth() + goiTap.thoiHan);
        } else if (goiTap.donViThoiHan === 'Ng√†y') {
            ngayKetThuc.setDate(ngayKetThuc.getDate() + goiTap.thoiHan);
        } else if (goiTap.donViThoiHan === 'NƒÉm') {
            ngayKetThuc.setFullYear(ngayKetThuc.getFullYear() + goiTap.thoiHan);
        }

        console.log('üîç Date calculation:', {
            ngayBatDau: ngayBatDau.toISOString(),
            ngayKetThuc: ngayKetThuc.toISOString(),
            thoiHan: goiTap.thoiHan,
            donViThoiHan: goiTap.donViThoiHan
        });

        // T·∫°o l·ªãch t·∫≠p
        const lichTap = new LichTap({
            hoiVien: chiTietGoiTap.maHoiVien._id,
            pt: chiTietGoiTap.ptDuocChon._id,
            ngayBatDau,
            ngayKetThuc,
            chiTietGoiTap: chiTietGoiTapId,
            soNgayTapTrongTuan: chiTietGoiTap.soNgayTapTrongTuan,
            cacNgayTap,
            khungGioTap,
            trangThaiLich: 'DANG_HOAT_DONG'
        });

        await lichTap.save();

        // T·∫°o c√°c bu·ªïi t·∫≠p d·ª±a tr√™n l·ªãch
        const buoiTapList = await generateWorkoutSessions(lichTap, goiTap);

        console.log('üîç Generated buoiTapList:', buoiTapList.length);
        console.log('üîç lichTap.cacBuoiTap after generation:', lichTap.cacBuoiTap);

        // C·∫≠p nh·∫≠t chi ti·∫øt g√≥i t·∫≠p
        await ChiTietGoiTap.findByIdAndUpdate(chiTietGoiTapId, {
            lichTapDuocTao: lichTap._id,
            trangThaiDangKy: 'DA_TAO_LICH'
        });

        res.json({
            success: true,
            message: 'ƒê√£ t·∫°o l·ªãch t·∫≠p th√†nh c√¥ng',
            data: {
                lichTap,
                soLuongBuoiTap: buoiTapList.length
            }
        });

    } catch (error) {
        console.error('Error generating workout schedule:', error);
        res.status(500).json({ message: 'L·ªói server khi t·∫°o l·ªãch t·∫≠p' });
    }
};

// H√†m ph·ª• tr·ª£ t·∫°o c√°c bu·ªïi t·∫≠p
const generateWorkoutSessions = async (lichTap, goiTap) => {
    console.log('üîç generateWorkoutSessions called with:', {
        lichTapId: lichTap._id,
        ngayBatDau: lichTap.ngayBatDau,
        ngayKetThuc: lichTap.ngayKetThuc,
        soNgayTapTrongTuan: lichTap.soNgayTapTrongTuan,
        cacNgayTap: lichTap.cacNgayTap,
        khungGioTap: lichTap.khungGioTap
    });

    const buoiTapList = [];
    const ngayBatDau = new Date(lichTap.ngayBatDau);
    const ngayKetThuc = new Date(lichTap.ngayKetThuc);

    // T√≠nh t·ªïng s·ªë ng√†y trong g√≥i t·∫≠p
    const totalDays = Math.ceil((ngayKetThuc - ngayBatDau) / (1000 * 60 * 60 * 24));

    // T√≠nh s·ªë bu·ªïi t·∫≠p d·ª±a tr√™n th·ªùi h·∫°n g√≥i v√† s·ªë ng√†y t·∫≠p trong tu·∫ßn
    const soTuanTap = Math.ceil(totalDays / 7);
    const soBuoiTapToiDa = soTuanTap * lichTap.soNgayTapTrongTuan;

    console.log('üîç Schedule calculation:', {
        totalDays,
        soTuanTap,
        soBuoiTapToiDa
    });

    let currentDate = new Date(ngayBatDau);
    let buoiTapCount = 0;

    while (currentDate <= ngayKetThuc && buoiTapCount < soBuoiTapToiDa) {
        const dayOfWeek = getDayOfWeek(currentDate);

        console.log('üîç Processing date:', {
            currentDate: currentDate.toISOString(),
            dayOfWeek,
            isInSchedule: lichTap.cacNgayTap.includes(dayOfWeek)
        });

        // Ki·ªÉm tra xem ng√†y n√†y c√≥ trong l·ªãch t·∫≠p kh√¥ng
        if (lichTap.cacNgayTap.includes(dayOfWeek)) {
            // T√¨m khung gi·ªù t∆∞∆°ng ·ª©ng
            const khungGio = lichTap.khungGioTap.find(kg => kg.ngayTrongTuan === dayOfWeek);

            console.log('üîç Found time slot:', khungGio);

            if (khungGio) {
                const buoiTap = new BuoiTap({
                    ngayTap: new Date(currentDate),
                    hoiVien: lichTap.hoiVien,
                    pt: lichTap.pt,
                    lichTap: lichTap._id,
                    gioBatDauDuKien: khungGio.gioBatDau,
                    gioKetThucDuKien: khungGio.gioKetThuc,
                    trangThaiXacNhan: 'CHO_XAC_NHAN',
                    cacBaiTap: [] // S·∫Ω ƒë∆∞·ª£c PT th√™m sau
                });

                await buoiTap.save();
                buoiTapList.push(buoiTap);
                buoiTapCount++;

                console.log('üîç Created buoiTap:', {
                    ngayTap: buoiTap.ngayTap,
                    gioBatDauDuKien: buoiTap.gioBatDauDuKien,
                    gioKetThucDuKien: buoiTap.gioKetThucDuKien
                });
            }
        }

        currentDate.setDate(currentDate.getDate() + 1);
    }

    // C·∫≠p nh·∫≠t danh s√°ch bu·ªïi t·∫≠p v√†o l·ªãch t·∫≠p
    lichTap.cacBuoiTap = buoiTapList.map(bt => bt._id);
    await lichTap.save();

    console.log('üîç generateWorkoutSessions result:', {
        totalSessions: buoiTapList.length,
        sessionDates: buoiTapList.map(bt => ({
            ngayTap: bt.ngayTap,
            gioBatDauDuKien: bt.gioBatDauDuKien,
            gioKetThucDuKien: bt.gioKetThucDuKien
        }))
    });

    return buoiTapList;
};

// H√†m ph·ª• tr·ª£ l·∫•y t√™n ng√†y trong tu·∫ßn
const getDayOfWeek = (date) => {
    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    return days[date.getDay()];
};

// L·∫•y l·ªãch t·∫≠p c·ªßa h·ªôi vi√™n
const getMemberWorkoutSchedule = async (req, res) => {
    try {
        const { hoiVienId } = req.params;

        const lichTapList = await LichTap.find({ hoiVien: hoiVienId })
            .populate('pt', 'hoTen danhGia chuyenMon')
            .populate('chiTietGoiTap')
            .populate({
                path: 'cacBuoiTap',
                populate: {
                    path: 'cacBaiTap.baiTap',
                    select: 'tenBaiTap moTa nhomCo'
                }
            })
            .sort({ createdAt: -1 });

        res.json({
            success: true,
            data: lichTapList
        });

    } catch (error) {
        console.error('Error getting member workout schedule:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y l·ªãch t·∫≠p' });
    }
};

// C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác c·ªßa PT
const updateTrainerSchedule = async (req, res) => {
    try {
        const { ptId } = req.params;
        const { lichLamViec } = req.body; // Array of schedule objects

        // X√≥a l·ªãch l√†m vi·ªác c≈©
        await LichLamViecPT.deleteMany({ pt: ptId });

        // T·∫°o l·ªãch l√†m vi·ªác m·ªõi
        const newSchedules = lichLamViec.map(lich => ({
            pt: ptId,
            thu: lich.thu,
            gioLamViec: lich.gioLamViec,
            ghiChu: lich.ghiChu
        }));

        await LichLamViecPT.insertMany(newSchedules);

        res.json({
            success: true,
            message: 'ƒê√£ c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('Error updating trainer schedule:', error);
        res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác' });
    }
};

// L·∫•y l·ªãch l√†m vi·ªác c·ªßa PT v·ªõi th√¥ng tin bu·ªïi t·∫≠p
const getTrainerSchedule = async (req, res) => {
    try {
        const { ptId } = req.params;

        // Ki·ªÉm tra ObjectId h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(ptId)) {
            return res.status(400).json({
                success: false,
                message: 'ID PT kh√¥ng h·ª£p l·ªá',
                receivedId: ptId
            });
        }

        // Ki·ªÉm tra PT c√≥ t·ªìn t·∫°i kh√¥ng
        const pt = await PT.findOne({ _id: ptId });
        if (!pt) {
            return res.status(404).json({
                success: false,
                message: 'PT kh√¥ng t·ªìn t·∫°i',
                searchedId: ptId
            });
        }

        // L·∫•y l·ªãch l√†m vi·ªác c∆° b·∫£n c·ªßa PT
        const lichLamViec = await LichLamViecPT.find({ pt: ptId }).sort({ thu: 1 });

        // L·∫•y c√°c bu·ªïi t·∫≠p ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch cho PT n√†y
        const lichTapList = await LichTap.find({ pt: ptId })
            .populate('hoiVien', 'hoTen sdt')
            .populate({
                path: 'chiTietGoiTap',
                populate: {
                    path: 'maGoiTap',
                    select: 'tenGoiTap'
                }
            })
            .populate('cacBuoiTap')
            .sort({ createdAt: -1 });

        // T·∫°o c·∫•u tr√∫c d·ªØ li·ªáu k·∫øt h·ª£p
        const scheduleWithSessions = {
            lichLamViec: lichLamViec || [],
            cacBuoiTapDaLenLich: lichTapList ? lichTapList.map(lichTap => ({
                _id: lichTap._id,
                hoiVien: lichTap.hoiVien,
                goiTap: lichTap.chiTietGoiTap?.maGoiTap,
                soLuongBuoiTap: lichTap.soLuongBuoiTap,
                trangThai: lichTap.trangThai,
                cacBuoiTap: lichTap.cacBuoiTap,
                ngayBatDau: lichTap.ngayBatDau,
                ngayKetThuc: lichTap.ngayKetThuc
            })) : []
        };

        res.json({
            success: true,
            data: scheduleWithSessions
        });

    } catch (error) {
        console.error('Error getting trainer schedule:', error);
        console.error('Stack trace:', error.stack);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y l·ªãch l√†m vi·ªác: ' + error.message,
            error: error.stack
        });
    }
};

// Ho√†n th√†nh workflow g√≥i t·∫≠p
const completeWorkflow = async (req, res) => {
    try {
        const { chiTietGoiTapId } = req.params;

        // Ki·ªÉm tra chi ti·∫øt g√≥i t·∫≠p
        const chiTietGoiTap = await ChiTietGoiTap.findById(chiTietGoiTapId);
        if (!chiTietGoiTap) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω g√≥i t·∫≠p' });
        }

        // Ki·ªÉm tra xem ƒë√£ ho√†n th√†nh ƒë·ªß c√°c b∆∞·ªõc ch∆∞a
        if (chiTietGoiTap.trangThaiDangKy !== 'DA_TAO_LICH') {
            return res.status(400).json({
                message: 'Ch∆∞a ho√†n th√†nh ƒë·ªß c√°c b∆∞·ªõc workflow. C·∫ßn ho√†n th√†nh: ch·ªçn PT, t·∫°o l·ªãch t·∫≠p, v√† xem l·ªãch t·∫≠p'
            });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh ho√†n th√†nh
        const updatedChiTiet = await ChiTietGoiTap.findByIdAndUpdate(
            chiTietGoiTapId,
            {
                trangThaiDangKy: 'HOAN_THANH'
            },
            { new: true }
        ).populate('ptDuocChon').populate('maGoiTap').populate('maHoiVien');

        res.json({
            success: true,
            message: 'ƒê√£ ho√†n th√†nh workflow g√≥i t·∫≠p th√†nh c√¥ng',
            data: updatedChiTiet
        });

    } catch (error) {
        console.error('Error completing workflow:', error);
        res.status(500).json({ message: 'L·ªói server khi ho√†n th√†nh workflow' });
    }
};

// L·∫•y tr·∫°ng th√°i workflow hi·ªán t·∫°i
const getWorkflowStatus = async (req, res) => {
    try {
        const { registrationId } = req.params;
        const userId = req.user.id;

        const registration = await ChiTietGoiTap.findById(registrationId)
            .populate('goiTapId')
            .populate('nguoiDungId')
            .populate('branchId')
            .populate('ptDuocChon')
            .populate('lichTapDuocTao');

        if (!registration) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω' });
        }

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        const isOwner = registration.nguoiDungId._id.toString() === userId;
        const isPartner = registration.thongTinKhachHang?.partnerInfo?.userId === userId;

        if (!isOwner && !isPartner) {
            return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
        }

        // X√°c ƒë·ªãnh c√°c b∆∞·ªõc ƒë√£ ho√†n th√†nh
        const workflowSteps = {
            selectBranch: {
                completed: !!registration.branchId,
                required: isOwner, // Ch·ªâ ng∆∞·ªùi thanh to√°n m·ªõi c·∫ßn ch·ªçn chi nh√°nh
                data: registration.branchId
            },
            selectTrainer: {
                completed: !!registration.ptDuocChon,
                required: true,
                data: registration.ptDuocChon
            },
            createSchedule: {
                completed: !!registration.lichTapDuocTao,
                required: true,
                data: registration.lichTapDuocTao
            }
        };

        res.json({
            success: true,
            data: {
                registration,
                workflowSteps,
                isOwner,
                isPartner,
                currentStep: getCurrentStep(workflowSteps, isOwner)
            }
        });

    } catch (error) {
        console.error('Error getting workflow status:', error);
        res.status(500).json({ message: 'L·ªói server' });
    }
};

// X√°c ƒë·ªãnh b∆∞·ªõc hi·ªán t·∫°i
const getCurrentStep = (steps, isOwner) => {
    if (isOwner && !steps.selectBranch.completed) return 'selectBranch';
    if (!steps.selectTrainer.completed) return 'selectTrainer';
    if (!steps.createSchedule.completed) return 'createSchedule';
    return 'completed';
};

// C·∫≠p nh·∫≠t chi nh√°nh
const updateBranch = async (req, res) => {
    try {
        const { registrationId } = req.params;
        const { branchId } = req.body;
        const userId = req.user.id;

        const registration = await ChiTietGoiTap.findById(registrationId);

        if (!registration) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω' });
        }

        // Ch·ªâ ng∆∞·ªùi thanh to√°n m·ªõi ƒë∆∞·ª£c ch·ªçn chi nh√°nh
        if (registration.nguoiDungId.toString() !== userId) {
            return res.status(403).json({ message: 'Ch·ªâ ng∆∞·ªùi thanh to√°n m·ªõi ƒë∆∞·ª£c ch·ªçn chi nh√°nh' });
        }

        // Ki·ªÉm tra chi nh√°nh t·ªìn t·∫°i
        const branch = await ChiNhanh.findById(branchId);
        if (!branch) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y chi nh√°nh' });
        }

        registration.branchId = branchId;
        await registration.save();

        res.json({
            success: true,
            message: 'ƒê√£ c·∫≠p nh·∫≠t chi nh√°nh th√†nh c√¥ng',
            data: registration
        });

    } catch (error) {
        console.error('Error updating branch:', error);
        res.status(500).json({ message: 'L·ªói server' });
    }
};

module.exports = {
    getAvailableTrainers,
    selectTrainer,
    generateWorkoutSchedule,
    getMemberWorkoutSchedule,
    updateTrainerSchedule,
    getTrainerSchedule,
    completeWorkflow,
    getWorkflowStatus,
    updateBranch
};
